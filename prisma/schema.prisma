generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model attitudes {
  attitude_description String @id @db.VarChar(255)
}

model event {
  event_id                                       Int              @id @default(autoincrement())
  event_title                                    String           @unique(map: "event_title") @db.VarChar(32)
  event_text                                     String?          @db.Text
  faction_initiator                              Int?
  faction_target                                 Int?
  date_start                                     DateTime         @db.Date
  date_end                                       DateTime?        @db.Date
  world_id                                       Int
  faction_event_faction_initiatorTofaction       faction?         @relation("event_faction_initiatorTofaction", fields: [faction_initiator], references: [faction_id], onDelete: NoAction, onUpdate: NoAction, map: "event_ibfk_1")
  faction_event_faction_targetTofaction          faction?         @relation("event_faction_targetTofaction", fields: [faction_target], references: [faction_id], onDelete: NoAction, onUpdate: NoAction, map: "event_ibfk_2")
  event_chain_event_chain_event_precedentToevent event_chain[]    @relation("event_chain_event_precedentToevent")
  event_chain_event_chain_event_resultingToevent event_chain[]    @relation("event_chain_event_resultingToevent")
  event_faction                                  event_faction[]
  event_item                                     event_item[]
  event_location                                 event_location[]
  event_sentient                                 event_sentient[]

  @@index([faction_initiator], map: "faction_initiator")
  @@index([faction_target], map: "faction_target")
}

model event_chain {
  event_chain_id                           Int    @id @default(autoincrement())
  event_precedent                          Int?
  event_resulting                          Int?
  world_id                                 Int
  event_event_chain_event_precedentToevent event? @relation("event_chain_event_precedentToevent", fields: [event_precedent], references: [event_id], onDelete: NoAction, onUpdate: NoAction, map: "event_chain_ibfk_1")
  event_event_chain_event_resultingToevent event? @relation("event_chain_event_resultingToevent", fields: [event_resulting], references: [event_id], onDelete: NoAction, onUpdate: NoAction, map: "event_chain_ibfk_2")

  @@index([event_precedent], map: "event_precedent")
  @@index([event_resulting], map: "event_resulting")
}

model event_faction {
  event_id   Int
  faction_id Int
  event      event   @relation(fields: [event_id], references: [event_id], onDelete: NoAction, onUpdate: NoAction, map: "event_faction_ibfk_1")
  faction    faction @relation(fields: [faction_id], references: [faction_id], onDelete: NoAction, onUpdate: NoAction, map: "event_faction_ibfk_2")

  @@id([event_id, faction_id])
  @@index([faction_id], map: "faction_id")
}

model event_item {
  event_id Int
  item_id  Int
  event    event @relation(fields: [event_id], references: [event_id], onDelete: NoAction, onUpdate: NoAction, map: "event_item_ibfk_1")
  item     item  @relation(fields: [item_id], references: [item_id], onDelete: NoAction, onUpdate: NoAction, map: "event_item_ibfk_2")

  @@id([event_id, item_id])
  @@index([item_id], map: "item_id")
}

model event_location {
  event_id    Int
  location_id Int
  event       event    @relation(fields: [event_id], references: [event_id], onDelete: NoAction, onUpdate: NoAction, map: "event_location_ibfk_1")
  location    location @relation(fields: [location_id], references: [location_id], onDelete: NoAction, onUpdate: NoAction, map: "event_location_ibfk_2")

  @@id([event_id, location_id])
  @@index([location_id], map: "location_id")
}

model event_sentient {
  event_id    Int
  sentient_id Int
  event       event    @relation(fields: [event_id], references: [event_id], onDelete: NoAction, onUpdate: NoAction, map: "event_sentient_ibfk_1")
  sentient    sentient @relation(fields: [sentient_id], references: [sentient_id], onDelete: NoAction, onUpdate: NoAction, map: "event_sentient_ibfk_2")

  @@id([event_id, sentient_id])
  @@index([sentient_id], map: "sentient_id")
}

model faction {
  faction_id                             Int                  @id @default(autoincrement())
  faction_name                           String               @db.VarChar(255)
  faction_goals                          String?              @db.Text
  faction_type                           String?              @db.VarChar(255)
  leader                                 Int?
  world_id                               Int
  event_event_faction_initiatorTofaction event[]              @relation("event_faction_initiatorTofaction")
  event_event_faction_targetTofaction    event[]              @relation("event_faction_targetTofaction")
  event_faction                          event_faction[]
  sentient                               sentient?            @relation(fields: [leader], references: [sentient_id], onDelete: NoAction, onUpdate: NoAction, map: "faction_ibfk_1")
  faction_membership                     faction_membership[]

  @@index([leader], map: "leader")
}

model faction_membership {
  sentient_id           Int
  faction_id            Int
  faction_membership_id Int      @id @default(autoincrement())
  sentient              sentient @relation(fields: [sentient_id], references: [sentient_id], onDelete: NoAction, onUpdate: NoAction, map: "faction_membership_ibfk_1")
  faction               faction  @relation(fields: [faction_id], references: [faction_id], onDelete: NoAction, onUpdate: NoAction, map: "faction_membership_ibfk_2")

  @@index([faction_id], map: "faction_id")
  @@index([sentient_id], map: "sentient_id")
}

model item {
  item_id          Int              @id @default(autoincrement())
  item_name        String           @db.VarChar(64)
  item_description String?          @db.Text
  item_owner       Int?
  item_state       item_item_state?
  item_location    Int?
  world_id         Int
  event_item       event_item[]
  sentient         sentient?        @relation(fields: [item_owner], references: [sentient_id], onDelete: NoAction, onUpdate: NoAction, map: "item_ibfk_1")
  location         location?        @relation(fields: [item_location], references: [location_id], onDelete: NoAction, onUpdate: NoAction, map: "item_ibfk_2")

  @@index([item_location], map: "item_location")
  @@index([item_owner], map: "item_owner")
}

model location {
  location_id          Int                      @id @default(autoincrement())
  location_scale       location_location_scale?
  part_of              Int?
  location_description String?                  @db.Text
  game_master          Int?
  location_name        String                   @db.VarChar(255)
  event_location       event_location[]
  item                 item[]
  location             location?                @relation("locationTolocation", fields: [part_of], references: [location_id], onDelete: NoAction, onUpdate: NoAction, map: "location_ibfk_1")
  other_location       location[]               @relation("locationTolocation")
  user                 user[]
  world_user           world_user[]

  @@index([part_of], map: "part_of")
}

model sentient {
  sentient_id        Int                  @id @default(autoincrement())
  first_name         String               @db.VarChar(255)
  last_name          String?              @db.TinyText
  birth_date         DateTime?            @db.Date
  heroes_team_name   String?              @db.VarChar(255)
  race_name          String               @db.VarChar(255)
  short_title        String?              @db.VarChar(255)
  state              sentient_state?
  world_id           Int
  event_sentient     event_sentient[]
  faction            faction[]
  faction_membership faction_membership[]
  item               item[]
  user_sentient      user_sentient[]
}

model user {
  user_id       Int             @id @default(autoincrement())
  user_name     String          @db.VarChar(31)
  user_password String?         @db.VarChar(32)
  location_id   Int?
  sentient_id   Int?
  location      location?       @relation(fields: [location_id], references: [location_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_location")
  user_sentient user_sentient[]
  world_user    world_user[]

  @@index([location_id], map: "fk_user_location")
}

model user_sentient {
  user_sentient_id Int      @id @default(autoincrement())
  sentient_id      Int
  user_id          Int
  sentient         sentient @relation(fields: [sentient_id], references: [sentient_id], onDelete: NoAction, onUpdate: NoAction, map: "sentient_hero_ibfk_1")
  user             user     @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "sentient_hero_ibfk_2")

  @@unique([sentient_id, user_id], map: "unique_combination")
  @@index([user_id], map: "user_id")
}

model world_user {
  user_world_id Int      @id @default(autoincrement())
  user_id       Int
  location_id   Int
  user          user     @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "world_user_ibfk_1")
  location      location @relation(fields: [location_id], references: [location_id], onDelete: NoAction, onUpdate: NoAction, map: "world_user_ibfk_2")

  @@unique([user_id, location_id], map: "user_id")
  @@index([location_id], map: "location_id")
}

enum location_location_scale {
  World
  Continent
  Kingdom
  Province
  Area
}

enum item_item_state {
  on_person @map("on person")
  missing
  in_place  @map("in place")
}

enum sentient_state {
  alive
  dead
  undead
  missing
}
